name: Full Deploy Pipeline

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform Infra
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.11.4'

      - name: Terraform Format
        run: cd terraform && terraform fmt -check

      - name: Terraform Init
        run: cd terraform && terraform init

      - name: Terraform Validate
        run: cd terraform && terraform validate

      - name: Terraform Plan
        run: cd terraform && terraform plan

      - name: Terraform Apply
        run: cd terraform && terraform apply -auto-approve

  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-region: us-east-1

      - name: Build and Push Patient Image
        run: |
          docker build -t ${{ secrets.ECR_REPO_URI_PATIENT }} ./microservices/patient
          docker push ${{ secrets.ECR_REPO_URI_PATIENT }}

      - name: Build and Push Appointment Image
        run: |
          docker build -t ${{ secrets.ECR_REPO_URI_APPOINTMENT }} ./microservices/appointment
          docker push ${{ secrets.ECR_REPO_URI_APPOINTMENT }}

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ROLE }}
          aws-region: us-east-1

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          service: my-service
          cluster: my-cluster
          wait-for-service-stability: true